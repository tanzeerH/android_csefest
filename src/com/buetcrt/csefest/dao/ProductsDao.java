package com.buetcrt.csefest.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.buetcrt.csefest.dao.Products;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCTS.
*/
public class ProductsDao extends AbstractDao<Products, Long> {

    public static final String TABLENAME = "PRODUCTS";

    /**
     * Properties of entity Products.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property ImageURL = new Property(4, String.class, "imageURL", false, "IMAGE_URL");
        public final static Property ThumbURL = new Property(5, String.class, "thumbURL", false, "THUMB_URL");
        public final static Property Query = new Property(6, String.class, "query", false, "QUERY");
        public final static Property Price = new Property(7, Double.class, "price", false, "PRICE");
        public final static Property Quantity = new Property(8, Integer.class, "quantity", false, "QUANTITY");
        public final static Property CreatedAt = new Property(9, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(10, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public ProductsDao(DaoConfig config) {
        super(config);
    }
    
    public ProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCTS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'OBJECT_ID' TEXT," + // 1: objectId
                "'NAME' TEXT," + // 2: name
                "'DESCRIPTION' TEXT," + // 3: description
                "'IMAGE_URL' TEXT," + // 4: imageURL
                "'THUMB_URL' TEXT," + // 5: thumbURL
                "'QUERY' TEXT," + // 6: query
                "'PRICE' REAL," + // 7: price
                "'QUANTITY' INTEGER," + // 8: quantity
                "'CREATED_AT' INTEGER," + // 9: createdAt
                "'UPDATED_AT' INTEGER);"); // 10: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Products entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(5, imageURL);
        }
 
        String thumbURL = entity.getThumbURL();
        if (thumbURL != null) {
            stmt.bindString(6, thumbURL);
        }
 
        String query = entity.getQuery();
        if (query != null) {
            stmt.bindString(7, query);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(8, price);
        }
 
        Integer quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindLong(9, quantity);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(10, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(11, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Products readEntity(Cursor cursor, int offset) {
        Products entity = new Products( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageURL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbURL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // query
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // quantity
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createdAt
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Products entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbURL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuery(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setQuantity(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCreatedAt(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUpdatedAt(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Products entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Products entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
